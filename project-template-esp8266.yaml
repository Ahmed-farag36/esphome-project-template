# These substitutions allow the end user to override certain values
substitutions:
  name: "project-template"

esphome:
  name: "${name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true
  friendly_name: "Smartifi presence sensor"

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: Smartifi_Egypt.presence_sensor
    version: "1.0.0"
  includes:
    - ld2410.h
  on_boot:
    priority: -100
    then:
      - switch.turn_on: enable_mmWave

esp8266:
  board: esp12e

web_server:
  port: 80
  version: 2
  include_internal: true
  ota: false

# To be able to get logs from the device via serial and api.
logger:
  baud_rate: 0
  logs:
    sensor: INFO # DEBUG level with uart_target_output = overload!
    binary_sensor: INFO
    text_sensor: INFO

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://Ahmed-farag36/esphome-project-template/project-template-esp8266.yaml@main
  import_full_config: True

wifi:
  # Set up a wifi access point using the device name above
  ap:
    password: "12345678"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

##########################################################
# Most projects should not remove anything from above here
# and should just modify the name, project name/version
# and git url for the dashboard_import
##########################################################

# Sets up the improv via serial client for Wi-Fi provisioning.
# Handy if your device has a usb port for the user to add credentials when they first get it.
improv_serial:

# Status LED => blinks if WiFi disconnected or no API clients (not connected to Home assistant) or any error
status_led:
  pin:
    number: GPIO2
    inverted: true # normally working [OFF] / error [FLASHING]

light:
  - platform: monochromatic
    name: ${name}_blueled
    output: blue_led
    internal: true # hides the Blue LED from HomeAssistant

binary_sensor:
  - platform: gpio
    name: mmwave_ld2410
    id: mmWave
    pin: GPIO5
    device_class: motion

  - platform: gpio
    name: PIR output
    id: pir
    pin: GPIO4
    device_class: motion

  - platform: template
    name: Presence
    lambda: |-
      if(id(mmWave).state or id(pir).state) {
        id(presence).turn_on();
        return true;
      } else {
        id(presence).turn_off();
        return false;
      }

uart:
  id: uart_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: [0xF8,0xF7,0xF6,0xF5]

custom_component:
  - lambda: |-
      auto c = new LD2410(uart_bus);
      App.register_component(c);
      return {c};
    components:
      - id: ld2410

sensor:
  - platform: custom
    lambda: |-
      auto c = static_cast<LD2410 *>(ld2410);
      return {c->motionTargetDistance, c->motionTargetEnergy,
              c->staticTargetDistance, c->staticTargetEnergy,
              c->detectDistance
              };

    sensors:
      - name: "Moving Target Distance"
      - name: "Moving Target Energy"
      - name: "Static Target Distance"
      - name: "Static Target Energy"
      - name: "Detection Distance"

text_sensor:
  - platform: custom
    lambda: |-
      auto c = static_cast<LD2410 *>(ld2410);
      return {c->version_sensor,
              c->staticGateEnergy, c->motionGateEnergy};

    text_sensors:
      - name: "Version Number"
      - name: "Static Gate Energy"
      - name: "Motion Gate Energy"

switch:
  - platform: custom
    lambda: |-
      auto c = static_cast<LD2410 *>(ld2410);
      return {c->show_stats, c->show_engineering_stats};

    switches:
      - name: "Enable mmWave"
        id: enable_mmWave
      - name: "Show Engineering Stats"

output:
  - platform: gpio
    id: presence
    pin: GPIO14

  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO2
    inverted: True

button:
  - platform: template
    name: "reset mmWave"
    entity_category: diagnostic
    on_press:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
      - lambda: 'static_cast<LD2410 *>(ld2410)->factoryReset();'
      - lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
      - delay: 500ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryAll();'


number:
  - platform: template
    id: maxMotionDistance
    name: Max Motion distance
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "cm"
    min_value: 75
    max_value: 600
    step: 75
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMaxDistancesAndNoneDuration(x, id(maxStaticDistance).state, id(noneDuration).state);

  - platform: template
    id: maxStaticDistance
    name: Max Static distance
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "cm"
    min_value: 75
    max_value: 600
    step: 75
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMaxDistancesAndNoneDuration(id(maxMotionDistance).state, x, id(noneDuration).state);

  - platform: template
    id: noneDuration
    name: Timeout
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "s"
    min_value: 0
    max_value: 300
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMaxDistancesAndNoneDuration(id(maxMotionDistance).state, id(maxStaticDistance).state, x);

  - platform: template
    id: motionGate0Sensitivity
    name: Motion Sensitivity Gate 0
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(0, x);

  # Not supported by the sensor
  #  - platform: template
  #    id: staticGate0Sensitivity
  #    update_interval: never
  #    optimistic: true
  #    unit_of_measurement: "%"
  #    min_value: 0
  #    max_value: 100
  #    step: 1
  #    set_action:
  #      - lambda: |-
  #          auto c = static_cast<LD2410 *>(ld2410);
  #          c->setStaticSensitivity(0, x);

  - platform: template
    id: motionGate1Sensitivity
    name: Motion Sensitivity Gate 1
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(1, x);

  # Not supported by the sensor
  #  - platform: template
  #    id: staticGate1Sensitivity
  #    update_interval: never
  #    optimistic: true
  #    unit_of_measurement: "%"
  #    min_value: 0
  #    max_value: 100
  #    step: 1
  #    set_action:
  #      - lambda: |-
  #          auto c = static_cast<LD2410 *>(ld2410);
  #          c->setStaticSensitivity(1, x);

  - platform: template
    id: motionGate2Sensitivity
    name: Motion Sensitivity Gate 2
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(2, x);

  - platform: template
    id: staticGate2Sensitivity
    name: Static Sensitivity Gate 2
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(2, x);

  - platform: template
    id: motionGate3Sensitivity
    name: Motion Sensitivity Gate 3
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(3, x);

  - platform: template
    id: staticGate3Sensitivity
    name: Static Sensitivity Gate 3
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(3, x);

  - platform: template
    id: motionGate4Sensitivity
    name: Motion Sensitivity Gate 4
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(4, x);

  - platform: template
    id: staticGate4Sensitivity
    name: Static Sensitivity Gate 4
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(4, x);

  - platform: template
    id: motionGate5Sensitivity
    name: Motion Sensitivity Gate 5
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(5, x);

  - platform: template
    id: staticGate5Sensitivity
    name: Static Sensitivity Gate 5
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(5, x);

  - platform: template
    id: motionGate6Sensitivity
    name: Motion Sensitivity Gate 6
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(6, x);

  - platform: template
    id: staticGate6Sensitivity
    name: Static Sensitivity Gate 6
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(6, x);

  - platform: template
    id: motionGate7Sensitivity
    name: Motion Sensitivity Gate 7
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(7, x);

  - platform: template
    id: staticGate7Sensitivity
    name: Static Sensitivity Gate 7
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(7, x);

  - platform: template
    id: motionGate8Sensitivity
    name: Motion Sensitivity Gate 8
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setMotionSensitivity(8, x);

  - platform: template
    id: staticGate8Sensitivity
    name: Static Sensitivity Gate 8
    entity_category: config
    update_interval: never
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      - lambda: |-
          auto c = static_cast<LD2410 *>(ld2410);
          c->setStaticSensitivity(8, x);
